# import libraries
import pandas as pd
import numpy as np
from math import pi
from dateutil.relativedelta import *
from calendar import monthrange
from functools import reduce
from pyspark.sql.functions import *
from pyspark.sql import *
from pyspark.sql.types import *


# Define function
# Function 1
# get domain from table 1
def get_domain(label_use, segment_name, month):
    df = spark.sql(f"""
                    with df1 as (
                    select distinct id
                            , string(domainname) as domainname_temp
                            , month
                    from table_1
                    where label like "%{label_use}%"
                    and month in ({month})
                    )
                    select id
                            , "{segment_name}" as segment
                            , case when domainname_temp like "%,%" then substring(domainname_temp, 2, locate(",",domainname_temp,1)-2) else substring(domainname_temp, 2, locate("]", domainname_temp,1)-2) end as domainname
                            , month
                    from df1
                    """)
    print("segment name:" + segment_name)
    return df


# Function 2
# get domain name from table_2 and use function finding keyword
def get_keyword_domain(keyword, sgment_name, month):
    keyword_lkup = spark.table("schema.table_2")\
                        .filter(col('month')==month)\
                        .filter(col('domainname').contains(keyword))\
                        .select('domainname').distinct()

    df = spark.table("schema.table_3")\
              .filter(col("month")==month)\
              .join(broadcast(keyword_lkup), 'domainname', 'inner')\
              .select('id', 'domainname', 'par_month').distinct()

    print("domain by %s = %s" %(keyword, keyword_lkup.agg(approx_count_distinct('domainname')).collect()),
          "mobiles volume access = %s" %(df.agg(approx_count_distinct('id')).collect()))

    df = df.withColumn('segment', lit(segment_name))
    cols = ['id', 'segment', 'domainname', 'month']
    df = df.select(cols)
    return df


# Function 3
# get domain name from list website
def get_website_domain(list_website, segment_name, month):
    df = spark.table(schema.table_3)\
              .filter(col('par_month') == month)\
              .filter(col('domainname').isin(list_website))\
              .select('id', 'month', 'domainname').distinct()
    df = df.withColumn('segment', lit('segment_name'))
    cols = ['id', 'segment', 'domainname', 'month']
    return df


# Function 4
# get serverhostname name from list website
def get_website_hostname(list_website, segment_name, month):
    df = spark.table("schema.table_4")\
              .filter(col('par_month') == month)\
              .filter(col('server_hostname').isin(list_website))\
              .select('id', 'month', col('server_hostname').alias('domainname')).distinct()
    df = df.withColumn('segment', lit(segment_name))
    cols = ['id', 'segment', 'domainname', 'month']
    df = df.select(cols)
    return df


def get_dataframe(list_ws):
  reporot_frame = list(map(
  lambda x: Row(text = x[0], segment = x[1], month = x[2])
  , list_ws))

  df = spark.createDataFrame(report_frame)
  return df


def get
